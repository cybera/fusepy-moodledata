[loggers]
keys = root, fuse, swift, swift_worker, peewee

[handlers]
keys = console_handler, file_handler, file_handler_with_json_advanced

[formatters]
keys = console, json, json_advanced

####################################################################################################
# Internal loggers
[logger_root]
level = DEBUG
handlers = console_handler, file_handler

# The fuse logger is used by the fuse module and also from within our fuse level code. Set the 
# level to DEBUG to get a better idea of exactly what the Fuse layer is doing
[logger_fuse]
level = INFO
handlers = console_handler, file_handler
qualname = fuse
propagate = 0

[logger_swift]
level = DEBUG
handlers = console_handler, file_handler
qualname = swift
propagate = 0

# This is used by swift workers. Set the level to DEBUG to get a trace of what each worker thread
# is up to
[logger_swift_worker]
level = DEBUG
handlers = console_handler, file_handler_with_json_advanced
qualname = swift_worker
propagate = 0


####################################################################################################
# Other Third party loggers
[logger_peewee]
level = WARNING
handlers = console_handler, file_handler
qualname = peewee
propagate = 0


####################################################################################################
# Handlers
[handler_console_handler]
class = StreamHandler
level = WARNING
formatter = console
args = (sys.stdout,)

# If the second arguement in args is 'w' then we truncate the file every time the application is
# restarted; if you want to append instead of truncate set it to 'a'.
[handler_file_handler]
class = FileHandler
level = DEBUG
formatter = json
args = ('/var/log/swiftfuse/swiftfuse.json', 'a')

[handler_file_handler_with_json_advanced]
class = FileHandler
level = DEBUG
formatter = json_advanced
args = ('/var/log/swiftfuse/swiftfuse.json', 'a')

####################################################################################################
# Formatters
[formatter_console]
format = %(asctime)s - %(name)s - %(levelname)s - %(message)s
class = logging.Formatter

[formatter_json]
format = {"timestamp":"%(asctime)s", "severity":"%(levelname)s", "component":"%(name)s", "message":"%(message)s"}
class = logging.Formatter

# Here it is assumed that %(message) will output json attributes.
[formatter_json_advanced]
format = {"timestamp":"%(asctime)s", "severity":"%(levelname)s", "component":"%(name)s", %(message)s}
class = logging.Formatter

